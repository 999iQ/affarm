package main

import (
	"affarm/config"
	"affarm/internal/database"
	"affarm/internal/handlers"
	services "affarm/internal/service"
	"log"
	"net/http"
)

func main() {
	cfg, _ := config.Load("config.yml")
	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	db, err := database.GetGormDB()
	if err != nil {
		log.Fatal(err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
	r := handlers.NewRouter(db)

	// 2. –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	sqlDB, err := db.DB()
	if err != nil {
		log.Fatalf("üîå Failed to get SQL DB: %v", err)
	}

	if err := sqlDB.Ping(); err != nil {
		log.Fatalf("üí• Database ping failed: %v", err)
	}

	log.Println("‚úÖ Database connection established")

	// –°–æ–∑–¥–∞–µ–º —á–µ–∫–µ—Ä —Ü–µ–Ω —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
	priceUpdater := services.NewPriceUpdater(db, cfg)
	// –ó–∞–ø—É—Å–∫–∞–µ–º —á–µ–∫–µ—Ä —Ü–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go priceUpdater.Start()
	defer priceUpdater.Stop()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
	server := &http.Server{
		Addr:    ":8080",
		Handler: r,
	}

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –ø–æ –ø—É—Ç–∏ http://localhost:8080")
	if err := server.ListenAndServe(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}
